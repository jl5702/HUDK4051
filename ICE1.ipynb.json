{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e18b2067",
   "metadata": {},
   "source": [
    "## SQL"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b60bd86",
   "metadata": {},
   "source": [
    "### 1 Selecting columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "59ae86ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "# select single columns\n",
    "SELECT name \n",
    "FROM people;\n",
    "\n",
    "# select multiple columns\n",
    "SELECT name, birthdate \n",
    "FROM people;\n",
    "\n",
    "# select all columns\n",
    "SELECT * \n",
    "FROM people;\n",
    "\n",
    "# return a certain number of results, use LIMIT keyword\n",
    "SELEC * \n",
    "FROM people\n",
    "LIMIT 10;\n",
    "\n",
    "# Select all the unique values from a column, use DISTINIC keyword\n",
    "SELECT DISTINCT language\n",
    "FROM films;\n",
    "\n",
    "# COUNT(*): the number of rows\n",
    "SELECT COUNT(*)\n",
    "FROM people;\n",
    "\n",
    "#COUNT(): count the number of non-missing values in a particular column\n",
    "SELECT COUNT(birthdate)\n",
    "FROM people;\n",
    "\n",
    "# count the number of distinct values\n",
    "SELECT COUNT(DISTINCT birthdate)\n",
    "FROM people;"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a04b8a1",
   "metadata": {},
   "source": [
    "### 2 Fliter rows (numeric values, text, ...)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5520e3db",
   "metadata": {},
   "outputs": [],
   "source": [
    "# WHERE\n",
    "\n",
    "SELECT title\n",
    "FROM films\n",
    "WHERE title = 'Metropolis';\n",
    "\n",
    "SELECT title\n",
    "FROM films\n",
    "WHERE release_year > 2000;\n",
    "\n",
    "# the number of films released before 2000\n",
    "SELECT COUNT(release_year)\n",
    "FROM films\n",
    "WHERE release_year < 2000;\n",
    "\n",
    "# select all details: SELECT *\n",
    "\n",
    "# get the number of Hindi language films\n",
    "SELECT COUNT(language)\n",
    "FROM films\n",
    "WHERE language = 'Hindi'\n",
    "\n",
    "\n",
    "# WHERE AND\n",
    "SELECT title, release_year\n",
    "FROM films\n",
    "WHERE language = 'Spanish'\n",
    "AND release_year < 2000\n",
    "\n",
    "# WHERE AND OR\n",
    "# enclose in parentheses\n",
    "SELECT title\n",
    "FROM films\n",
    "WHERE (release_year = 1994 OR release_year = 1995)\n",
    "AND (certification = 'PG' OR certification = 'R');\n",
    "\n",
    "# BETWEEN (inclusive)\n",
    "SELECT title\n",
    "FROM films\n",
    "WHERE release_year\n",
    "BETWEEN 1994 AND 2000;\n",
    "\n",
    "# WHERE IN (specify multiple values in a WHERE clause)\n",
    "SELECT name\n",
    "FROM kids\n",
    "WHERE age IN (2, 4, 6, 8, 10);\n",
    "\n",
    "\n",
    "\n",
    "# NULL and IS NULL / IS NOT NULL\n",
    "# to identify missing value\n",
    "\n",
    "SELECT COUNT(*)\n",
    "FROM films\n",
    "WHERE language IS NULL\n",
    "\n",
    "# LIKE and NOT LIKE\n",
    "# search for a pattern in a column\n",
    "# wildcard as a placeholder for some other values: Data% for Data. DataC, DataCampe, â€¦\n",
    "\n",
    "# Get the names of people whose names have 'r' as the second letter. The pattern you need is '_r%'.\n",
    "SELECT name\n",
    "FROM people\n",
    "WHERE name LIKE '_r%'"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "935aee0d",
   "metadata": {},
   "source": [
    "### 3 Aggregate functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6fe33286",
   "metadata": {},
   "outputs": [],
   "source": [
    "SELECT AVG(budget)\n",
    "FROM films;\n",
    "\n",
    "# MAX()\n",
    "# SUM()\n",
    "# MIN()\n",
    "\n",
    "# Combining aggregate functions with WHERE\n",
    "SELECT AVG(gross)\n",
    "FROM films\n",
    "WHERE title LIKE 'A%'\n",
    "\n",
    "# a note on arithmetic\n",
    "SQL assumes that if you divide an integer by an integer, you want to get an integer back.\n",
    "SELECT (4 / 3);\n",
    "Result: 1\n",
    "If you want more precision when dividing, you can add decimal places to your numbers.\n",
    "SELECT (4.0 / 3.0);\n",
    "Result: 1.333\n",
    "\n",
    "\n",
    "# AS\n",
    "SELECT MAX(budget) AS max_budget,\n",
    "       MAX(duration) AS max_duration\n",
    "FROM films;\n",
    "\n",
    "SELECT title,\n",
    "(duration / 60.0) AS duration_hours\n",
    "FROM films\n",
    "\n",
    "# aliasing\n",
    "SELECT COUNT(deathdate) * 100.0 / COUNT (deathdate IS NULL)AS percentage_dead\n",
    "FROM people"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "41effb94",
   "metadata": {},
   "source": [
    "### 4 Sorting and grouping"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "77531cb8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ORDER BY\n",
    "# ORDER BY: ascending order\n",
    "# ORDER BY __ DESC: descending order\n",
    "\n",
    "SELECT name, birthdate\n",
    "FROM people\n",
    "ORDER BY birthdate\n",
    "\n",
    "# Sorting multiple columns\n",
    "# the order of column is important\n",
    "\n",
    "# GROUP BY\n",
    "SELECT sex, count(*)\n",
    "FROM employees\n",
    "GROUP BY sex\n",
    "ORDER BY count DESC;\n",
    "\n",
    "SELECT release_year, AVG(duration)\n",
    "FROM films\n",
    "GROUP BY release_year\n",
    "\n",
    "# combining GROUP BY and ORDER BY \n",
    "# put the ORDER BY clause at the end\n",
    "SELECT country, release_year, MIN(gross)\n",
    "FROM films\n",
    "GROUP BY release_year, country\n",
    "ORDER BY country, release_year\n",
    "\n",
    "# HAVING\n",
    "# aggregate functions cannot be used in WHERE -> HAVING\n",
    "SELECT release_year\n",
    "FROM films\n",
    "GROUP BY release_year\n",
    "HAVING COUNT(title) > 10;\n",
    "\n",
    "# All together\n",
    "SELECT release_year, AVG(budget) AS avg_budget, AVG(gross) AS avg_gross\n",
    "FROM films\n",
    "WHERE release_year > 1990\n",
    "GROUP BY release_year\n",
    "HAVING AVG(budget) > 60000000\n",
    "ORDER BY avg_gross DESC\n",
    "\n",
    "SELECT country, AVG(budget) AS avg_budget, AVG(gross) AS avg_gross\n",
    "FROM films\n",
    "GROUP BY country\n",
    "HAVING COUNT(title) > 10 -- where the country has more than 10 titles\n",
    "ORDER BY country\n",
    "LIMIT 5-- limit to only show 5 results\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
